分析这类问题从两个层面分析：语法层面与设计层面。
较好的博客：
http://www.cnblogs.com/chenssy/p/3376708.html
http://www.importnew.com/18780.html

抽象类：
抽象类是具有抽象方法的类。

抽象方法：abstract void fun();

抽象类的存在价值是，某些逻辑在父类中实现无意义，需要子类自己去实现。同时又需要管控子类必须实现这些逻辑，这就是抽象类存在的意义。
所以：
（1）抽象类不能有对象，因为类中有抽象方法。
（2）抽象类的子类必须实现抽象方法
（3）抽象类的的抽象方法必须为public或protected（子类集成不了private方法）
（4）抽象类中可以有具体实现的方法，子类可直接继承，不用自己实现。
（5）抽象类需要有修饰符：abstract


接口：
接口是对类行为的抽象、规定。它规定了自己的实现类中必须实现的方法。

二者区别：

语法层面：
（1）抽象类是类，可以有具体的方法。       接口不能有，接口中的所有方法默认是public abstract（只能是这样的）
（2）实现类与抽象类是继承关系。即只能有一个父类。           实现类与接口是实现关系。可以同时实现多个接口。
（3）抽象类中的成员变量可以是各种访问级别的，同普通的类一样。   接口中的成员变量只能是 public static final
（4）抽象类可以有静态代码块。   接口不行。
设计层面：
（1）抽象类是一个类，主要特点：将一些逻辑延迟到子类中实现，自己也可以实现具体的逻辑。使得子类不改变一个完整流程（算法）的结构，即可重新定义这个流程中
的某些步骤。与模板方法模式天作之合。
（2）抽象类后期增加非抽象方法，不用修改子类。
（3）接口是一种行为规范，规定实现类中的需要有哪些方法。接口有修改的话，实现类必须一起修改。

经典的例子：door&&alarm，完美说明了抽象类与接口的差别：

门都有open( )和close( )两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念：
abstract class Door {
    public abstract void open();
    public abstract void close();
}
interface Door {
    public abstract void open();
    public abstract void close();
}
需要增加一个警报功能：
两种思路：
1）将这三个功能都放在抽象类里面，但是这样一来所有继承于这个抽象类的子类都具备了报警功能，但是有的门并不一定具备报警功能；
2）将这三个功能都放在接口里面，需要用到报警功能的类就需要实现这个接口中的open( )和close( )，
也许这个类根本就不具备open( )和close( )这两个功能，比如火灾报警器。

较好的方法：
单独将报警设计为一个接口，包含alarm()行为,Door设计为单独的一个抽象类，包含open和close两种行为。再设计一个报警门继承Door类和实现Alarm接口。
interface Alram {
    void alarm();
}
 
abstract class Door {
    void open();
    void close();
}
 
class AlarmDoor extends Door implements Alarm {
    void oepn() {
      //....
    }
    void close() {
      //....
    }
    void alarm() {
      //....
    }
}
